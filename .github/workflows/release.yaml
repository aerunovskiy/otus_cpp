name: 'C++ CI Release'
on:
  push:
    branches:
      - release

env:
  RELEASE_NAME: $(cat $PWD/$FOLDER/CMakeLists.txt | grep -Po "(?<=project\().*(?=\))" )

jobs:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: set release name
      run: echo "release name $RELEASE_NAME"
    - name: install boost
      run: sudo apt-get install libboost-all-dev
    - name: mkdir
      run: mkdir build
    - name: cmake
      run: cmake -Bbuild -DPATCH_VERSION=${{ github.run_number }} -DBUILD_TESTS=OFF ${{github.workspace}}/$FOLDER/
    - name: cmake build
      run: cmake --build build/
    - run: cmake --build build/ --target package
    - name: Run unit tests
      run: cd ${{github.workspace}}/$FOLDER && $PWD/../scripts/run_unit_tests.sh
    - name: install valgrind
      run: sudo apt-get install valgrind
    - name: run valgrind
      run: cd ${{github.workspace}}/$FOLDER && $PWD/../scripts/check_valgrind.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 0.7.0
        release_name: bulk_0.7.0
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/$RELEASE_NAME-0.0.${{ github.run_number }}-Linux.deb
        asset_name: /build/$RELEASE_NAME-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
